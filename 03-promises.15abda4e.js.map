{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,QAASC,SAASC,cAAc,uBAChCC,OAAQF,SAASC,cAAc,sBAC/BE,SAAUH,SAASC,cAAc,wBACjCG,OAAQJ,SAASC,cAAc,SAEjCH,EAAKM,OAAOC,iBAAiB,SAK7B,SAAqBC,GACnBC,EAAID,EAAIE,OAAOC,MAAQH,EAAIE,OAAOE,K,IALpCZ,EAAKM,OAAOC,iBAAiB,UAQ7B,SAAsBC,GACpBA,EAAIK,iBAMJ,IAJA,IAAMC,EAASC,OAAON,EAAIK,QACpBE,EAAOD,OAAON,EAAIO,MACpBC,EAAQF,OAAON,EAAIS,OAEdC,EAAI,EAAGA,GAAKL,EAAQK,IAC3BC,EAAcD,EAAGF,GACdI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUL,EAAKI,EAALJ,MACjBM,EAAA1B,GAAS2B,OAAOC,QACd,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANT,EAAM,M,IAGjDU,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUL,EAAKI,EAALJ,MAClBM,EAAA1B,GAAS2B,OAAOI,QACd,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANT,EAAM,M,IAIjDD,GAASD,EAGXR,EAAIsB,cAAcC,O,IA7BpB,IAAMtB,EAAM,GAgCZ,SAASW,EAAcG,EAAUL,GAC/B,IAAMc,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,aAAY,WACNN,EACFI,EAAQ,CAAEb,WAAUL,UAEpBmB,EAAO,CAAEd,WAAUL,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayEl: document.querySelector(\"input[name='delay']\"),\n  stepEl: document.querySelector(\"input[name='step']\"),\n  amountEl: document.querySelector(\"input[name='amount']\"),\n  formEl: document.querySelector('form'),\n};\nrefs.formEl.addEventListener('input', onFormInput);\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nconst obj = {};\n\nfunction onFormInput(evt) {\n  obj[evt.target.name] = evt.target.value;\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const amount = Number(obj.amount);\n  const step = Number(obj.step);\n  let delay = Number(obj.delay);\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$refs","delayEl","document","querySelector","stepEl","amountEl","formEl","addEventListener","evt","$ce04d3a99e08e73b$var$obj","target","name","value","preventDefault","amount","Number","step","delay1","delay","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","$parcel$interopDefault","Notify","success","concat","catch","failure","currentTarget","reset","shouldResolve","Math","random","Promise","resolve","reject","setInterval"],"version":3,"file":"03-promises.15abda4e.js.map"}